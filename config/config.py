import os
import configparser


class Config:

    def __init__(self, base_dir):
        config = configparser.ConfigParser()
        config_file_path = os.path.join(base_dir, "config.ini")
        if not os.path.exists(config_file_path):
            print("WARN : Missing config.ini file - File Not Found %s", config_file_path)
            print("INFO : Using preconfigured defaults")
            config_file = os.path.join(base_dir, 'config', 'default_config.ini')
            config.read(config_file)
        else:
            config.read(config_file_path)

        self.calibrate = config.getboolean('DEFAULT', 'calibrate', fallback=True)
        self.cal_obj_px = config.getint('DEFAULT', 'cal_obj_px', fallback=90)
        self.cal_obj_mm = config.getfloat('DEFAULT', 'cal_obj_mm', fallback=4700.0)
        self.pluginEnable = config.getboolean('DEFAULT', 'pluginEnable', fallback=False)
        self.pluginName = config.get('DEFAULT', 'pluginName', fallback='picam240')
        self.x_left = config.getint('DEFAULT', 'x_left', fallback=25)
        self.x_right = config.getint('DEFAULT', 'x_right', fallback=295)
        self.y_upper = config.getint('DEFAULT', 'y_upper', fallback=75)
        self.y_lower = config.getint('DEFAULT', 'y_lower', fallback=185)
        self.gui_window_on = config.getboolean('DEFAULT', 'gui_window_on', fallback=False)
        self.show_thresh_on = config.getboolean('DEFAULT', 'show_thresh_on', fallback=False)
        self.show_crop_on = config.getboolean('DEFAULT', 'show_crop_on', fallback=False)
        self.verbose = config.getboolean('DEFAULT', 'verbose', fallback=True)
        self.display_fps = config.getboolean('DEFAULT', 'display_fps', fallback=False)
        self.log_data_to_CSV = config.getboolean('DEFAULT', 'log_data_to_CSV', fallback=True)
        self.loggingToFile = config.getboolean('DEFAULT', 'loggingToFile', fallback=False)
        self.logFilePath = config.get('DEFAULT', 'logFilePath', fallback='speed-cam.log')
        self.SPEED_MPH = config.getboolean('DEFAULT', 'SPEED_MPH', fallback=False)
        self.track_counter = config.getint('DEFAULT', 'track_counter', fallback=5)
        self.MIN_AREA = config.getint('DEFAULT', 'MIN_AREA', fallback=100)
        self.track_len_trig = config.getint('DEFAULT', 'track_len_trig', fallback=70)
        self.show_out_range = config.getboolean('DEFAULT', 'show_out_range', fallback=True)
        self.x_diff_max = config.getint('DEFAULT', 'x_diff_max', fallback=20)
        self.x_diff_min = config.getint('DEFAULT', 'x_diff_min', fallback=1)
        self.x_buf_adjust = config.getint('DEFAULT', 'x_buf_adjust', fallback=10)
        self.track_timeout = config.getfloat('DEFAULT', 'track_timeout', fallback=0.0)
        self.event_timeout = config.getfloat('DEFAULT', 'event_timeout', fallback=0.3)
        self.max_speed_over = config.getint('DEFAULT', 'max_speed_over', fallback=0)

        self.WEBCAM = config.getboolean('CAMERA', 'WEBCAM', fallback=False)
        self.WEBCAM_SRC = config.getint('CAMERA', 'WEBCAM_SRC', fallback=0)
        self.WEBCAM_WIDTH = config.getint('CAMERA', 'WEBCAM_WIDTH', fallback=320)
        self.WEBCAM_HEIGHT = config.getint('CAMERA', 'WEBCAM_HEIGHT', fallback=240)
        self.WEBCAM_HFLIP = config.getboolean('CAMERA', 'WEBCAM_HFLIP', fallback=True)
        self.WEBCAM_VFLIP = config.getboolean('CAMERA', 'WEBCAM_VFLIP', fallback=False)
        self.CAMERA_WIDTH = config.getint('CAMERA', 'CAMERA_WIDTH', fallback=320)
        self.CAMERA_HEIGHT = config.getint('CAMERA', 'CAMERA_HEIGHT', fallback=240)
        self.CAMERA_FRAMERATE = config.getint('CAMERA', 'CAMERA_FRAMERATE', fallback=20)
        self.CAMERA_ROTATION = config.getint('CAMERA', 'CAMERA_ROTATION', fallback=0)
        self.CAMERA_VFLIP = config.getboolean('CAMERA', 'CAMERA_VFLIP', fallback=True)
        self.CAMERA_HFLIP = config.getboolean('CAMERA', 'CAMERA_HFLIP', fallback=True)
        self.image_path = config.get('CAMERA', 'image_path', fallback='media/images')
        self.image_prefix = config.get('CAMERA', 'image_prefix', fallback='speed-')
        self.image_format = config.get('CAMERA', 'image_format', fallback='.jpg')
        self.image_show_motion_area = config.getboolean('CAMERA', 'image_show_motion_area', fallback=True)
        self.image_filename_speed = config.getboolean('CAMERA', 'image_filename_speed', fallback=False)
        self.image_text_on = config.getboolean('CAMERA', 'image_text_on', fallback=True)
        self.image_text_bottom = config.getboolean('CAMERA', 'image_text_bottom', fallback=True)
        self.image_font_size = config.getint('CAMERA', 'image_font_size', fallback=12)
        self.image_bigger = config.getfloat('CAMERA', 'image_bigger', fallback=3.0)
        self.image_max_files = config.getint('CAMERA', 'image_max_files', fallback=0)
        self.imageSubDirMaxFiles = config.getint('CAMERA', 'imageSubDirMaxFiles', fallback=1000)
        self.imageSubDirMaxHours = config.getint('CAMERA', 'imageSubDirMaxHours', fallback=0)
        self.imageRecentMax = config.getint('CAMERA', 'imageRecentMax', fallback=100)
        self.imageRecentDir = config.get('CAMERA', 'imageRecentDir', fallback='media/recent')
        self.spaceTimerHrs = config.getint('CAMERA', 'spaceTimerHrs', fallback=0)
        self.spaceFreeMB = config.getint('CAMERA', 'spaceFreeMB', fallback=500)
        self.spaceMediaDir = config.get('CAMERA', 'spaceMediaDir', fallback='media/images')
        self.spaceFileExt = config.get('CAMERA', 'spaceFileExt', fallback='media/recent')
        self.SHOW_CIRCLE = config.getboolean('CAMERA', 'SHOW_CIRCLE', fallback=False)
        self.CIRCLE_SIZE = config.getint('CAMERA', 'CIRCLE_SIZE', fallback=5)
        self.LINE_THICKNESS = config.getint('CAMERA', 'LINE_THICKNESS', fallback=1)
        self.FONT_SCALE = config.getfloat('CAMERA', 'FONT_SCALE', fallback=0.5)
        self.WINDOW_BIGGER = config.getfloat('CAMERA', 'WINDOW_BIGGER', fallback=1.0)
        self.BLUR_SIZE = config.getint('CAMERA', 'BLUR_SIZE', fallback=10)
        self.THRESHOLD_SENSITIVITY = config.getint('CAMERA', 'THRESHOLD_SENSITIVITY', fallback=20)

        self.web_server_port = config.getint('SERVER', 'web_server_port', fallback=8080)
        self.web_server_root = config.get('SERVER', 'web_server_root', fallback='media')
        self.web_page_title = config.get('SERVER', 'web_page_title', fallback='SPEED-CAMERA Media')
        self.web_page_refresh_on = config.getboolean('SERVER', 'web_page_refresh_on', fallback=True)
        self.web_page_refresh_sec = config.get('SERVER', 'web_page_refresh_sec', fallback='900')
        self.web_page_blank = config.getboolean('SERVER', 'web_page_blank', fallback=False)
        self.web_image_height = config.get('SERVER', 'web_image_height', fallback='768')
        self.web_iframe_width_usage = config.get('SERVER', 'web_iframe_width_usage', fallback='70%%')
        self.web_iframe_width = config.get('SERVER', 'web_iframe_width', fallback='100%%')
        self.web_iframe_height = config.get('SERVER', 'web_iframe_height', fallback='100%%')
        self.web_max_list_entries = config.getint('SERVER', 'web_max_list_entries', fallback=0)
        self.web_list_height = config.get('SERVER', 'web_image_height', fallback='768')
        self.web_list_by_datetime = config.getboolean('SERVER', 'web_list_by_datetime', fallback=True)
        self.web_list_sort_descending = config.getboolean('SERVER', 'web_list_sort_descending', fallback=True)

